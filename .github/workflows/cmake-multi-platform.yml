# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "MA4" ]
  pull_request:
    branches: [ "MA4" ]

jobs:
  ubuntu-gcc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libomp-dev

      - name: Configure and build with GCC
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
          make -j$(nproc)

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure

  ubuntu-clang:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libomp-dev

      - name: Configure and build with Clang
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make -j$(nproc)

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure

  macos-clang:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: brew install libomp

      - name: Configure and build with Clang
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          make -j$(sysctl -n hw.logicalcpu)

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure

  # macos-gcc:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install dependencies
  #       run: brew install gcc

  #     - name: Configure and build with GCC
  #       run: |
  #         mkdir -p build
  #         cd build
  #         cmake .. -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
  #         make -j$(sysctl -n hw.logicalcpu)

  #     - name: Run tests
  #       run: |
  #         cd build
  #         ctest --output-on-failure

  windows-cl:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure and build with MSVC
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd build
          ctest --build-config Release
          # ctest --output-on-failure --config Release
